// Generated by CoffeeScript 1.4.0
(function() {
  var DBRef, ISODate, MSON, ObjectId, bson, makeFieldLiterals, stringifyArray, stringifyDbRef, stringifyPlainObject;

  bson = require('bson');

  ObjectId = bson.BSONPure.ObjectID;

  DBRef = bson.BSONPure.DBRef;

  ISODate = function(ISODateString) {
    return new Date(ISODateString);
  };

  module.exports = MSON = {};

  MSON.stringify = function(value) {
    var _ref;
    JSON.stringify(value);
    if (typeof value === "function") {
      return void 0;
    }
    if (typeof value === "undefined") {
      return void 0;
    }
    if (value === null) {
      return "null";
    }
    if (value.constructor.name === "DBRef") {
      return stringifyDbRef(value);
    }
    if (value.constructor.name === "ObjectID") {
      return "ObjectId(\"" + (value.toString()) + "\")";
    }
    if (value instanceof Date) {
      return "ISODate(\"" + (value.toISOString()) + "\")";
    }
    if (value instanceof Array) {
      return stringifyArray(value);
    }
    if (typeof value !== "object") {
      return JSON.stringify(value);
    }
    if ((_ref = value.constructor.name) === "Number" || _ref === "String" || _ref === "Boolean") {
      return JSON.stringify(value);
    }
    if (value.constructor.name === "Object") {
      return stringifyPlainObject(value);
    }
    throw new Error("Object contains value with unknown prototype '" + value.constructor.name + "'");
  };

  MSON.parseUnsafe = function(value) {
    return eval("(" + value + ")");
  };

  stringifyPlainObject = function(object) {
    return "{" + makeFieldLiterals(object).join(",") + "}";
  };

  makeFieldLiterals = function(object) {
    var key, value, _ref, _results;
    _results = [];
    for (key in object) {
      value = object[key];
      if ((_ref = typeof value) !== "function" && _ref !== "undefined") {
        _results.push(JSON.stringify(key) + ":" + MSON.stringify(value));
      }
    }
    return _results;
  };

  stringifyDbRef = function(dbRef) {
    var refJSON;
    refJSON = {};
    refJSON.$ref = dbRef.namespace;
    refJSON.$id = dbRef.oid;
    if (dbRef.db != null) {
      refJSON.$db = dbRef.db;
    }
    return JSON.stringify(refJSON);
  };

  stringifyArray = function(array) {
    var value;
    return "[" + ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        value = array[_i];
        _results.push(MSON.stringify(value));
      }
      return _results;
    })()).join(",") + "]";
  };

}).call(this);
