{
  "author": {
    "name": "PushOk Software",
    "email": "support@pushok.com"
  },
  "name": "tingodb",
  "version": "0.3.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/sergeyksv/tingodb.git"
  },
  "contributors": [
    {
      "name": "Sergey Korotkov",
      "email": "sergeyksv@gmail.com"
    },
    {
      "name": "Alexander Somov",
      "email": "al-s@yandex.ru"
    }
  ],
  "description": "Embedded Node.js database upward compatible with MongoDB",
  "homepage": "http://www.tingodb.com",
  "keywords": [
    "database",
    "datastore",
    "embedded",
    "mongodb"
  ],
  "main": "./lib/main",
  "engines": {
    "node": ">= v0.8.x"
  },
  "dependencies": {
    "async": "0.9.x",
    "safe": ">=0.1.2",
    "lodash": "2.4.x"
  },
  "scripts": {
    "test": "./test.sh"
  },
  "devDependencies": {
    "csv": "0.3.x",
    "mongodb": "1.4.x",
    "temp": "0.4.x",
    "lorem-ipsum": "1.0.x",
    "optimist": "0.6.x",
    "step": "0.0.x",
    "benchmark": "1.0.x",
    "mocha": "1.21.x"
  },
  "readme": "TingoDB\n=======\n\n[![Build Status](https://travis-ci.org/sergeyksv/tingodb.png?branch=master)](https://travis-ci.org/sergeyksv/tingodb)\n[![Deps Status](https://david-dm.org/sergeyksv/tingodb.png)](https://david-dm.org/sergeyksv/tingodb)\n[![Dev deps Status](https://david-dm.org/sergeyksv/tingodb/dev-status.png)](https://david-dm.org/sergeyksv/tingodb)\n\n**TingoDB** is an embedded JavaScript in-process filesystem or in-memory database upwards compatible with MongoDB at the API level.\n\nUpwards compatible means that if you build an app that uses functionality implemented by TingoDB you can switch to MongoDB almost without code changes. This greatly reduces implementation risks and give you freedom to switch to a mature solution at any moment.\n\nAs a proof for upward compatibility, all tests designed to run against both MongoDB and TingoDB.\nMoreover, significant parts of tests contributed from MongoDB nodejs driver projects and are used as is without modifications.\n\nFor those folks who familiar with the Mongoose.js ODM, we suggest to look at [Tungus](https://github.com/sergeyksv/tungus), an experimental driver that allows using the famous ODM tool with our database.\n\nFor more details please visit http://www.tingodb.com\n\nSubmiting bugs\n--------------\n\nGoal of our project is to fully mimics MongoDB functionality. Which means that we will consider bug as bug only when you find something that is working with MongoDB but didn't work with TingoDB. It would be very helful to get bugs in that case as pull requests to /test/misc-test.js file (or new file) which will contain code that reproduce issue. \n\nTo run test with MongoDB: ```./test.sh --quick --single=misc-test --db=mongodb```. \n\nTo run test with TingoDB: ```./test.sh --quick --single=misc-test --db=tingodb```\n\nUsage\n======\n\n\tnpm install tingodb\n\nAs stated, the API is fully compatible with MongoDB. The only differences are the initialization and getting the Db object. Consider this MongoDB code:\n\n```javascript\nvar Db = require('mongodb').Db,\n\tServer = require('mongodb').Server,\n\tassert = require('assert');\n\nvar db = new Db('test', new Server('locahost', 27017));\nvar collection = db.collection(\"batch_document_insert_collection_safe\");\ncollection.insert([{hello:'world_safe1'}\n  , {hello:'world_safe2'}], {w:1}, function(err, result) {\n  assert.equal(null, err);\n\n  collection.findOne({hello:'world_safe2'}, function(err, item) {\n\tassert.equal(null, err);\n\tassert.equal('world_safe2', item.hello);\n  })\n});\n```\n\nThe same example using TingoDB will be as follows:\n\n```javascript\nvar Db = require('tingodb')().Db,\n\tassert = require('assert');\n\nvar db = new Db('/some/local/path', {});\n// Fetch a collection to insert document into\nvar collection = db.collection(\"batch_document_insert_collection_safe\");\n// Insert a single document\ncollection.insert([{hello:'world_safe1'}\n  , {hello:'world_safe2'}], {w:1}, function(err, result) {\n  assert.equal(null, err);\n\n  // Fetch the document\n  collection.findOne({hello:'world_safe2'}, function(err, item) {\n\tassert.equal(null, err);\n\tassert.equal('world_safe2', item.hello);\n  })\n});\n```\n\nAs you can see, the difference is in the `require` call and database object initialization. \n\n#### require('tingodb')(options)\n\nIn contrast to MongoDB, the module `require` call will not return a usable module. It will return a function that accepts configuration options. This function will return something similar to the MongoDB module. THe extra step allows for passing some options that will control database behavior.\n\n##### memStore: true|false Default is false\nEnable in memory (no file access) mode. Can be useful for unit tests. File path will be used as db identity.\n\n##### nativeObjectID: true|false Default is false\n\nDoing some experimentation we found that using integer keys we can get the database to work faster and save some space. Additionally, for in-process databases there are almost no drawbacks versus globally unique keys. However, at the same time, it is relatively hard to keep unique integer keys outside of the database engine, so we made it part of the database engine code. Generated keys will be unique in the collection scope.\n\nWhen required, it is possible to switch to BSON ObjectID using the configuration option.\n\n##### cacheSize: integer Default is 1000\n\nMaximum number of cached objects per collection.\n\n##### cacheMaxObjSize: integer Default is 1024 bytes\n\nMaximum size of objects that can be placed in the cache.\n\n##### searchInArray: true|false Default is false\n\nGlobally enables support of search in nested arrays. MongoDB supports this unconditionally. For TingoDB, search in arrays when there are no arrays incurs a performance penalty. That's why this is switched off by default. \nAdditionally, and this might be better a approach, nested arrays support can be enabled for individual indexes or search queries.\n\nTo enable nested arrays in individual indexed, use \"_tiarr:true\" option.\n \n\tself._cash_transactions.ensureIndex(\"splits.accountId\",{_tiarr:true},cb); \n \nTo enable nested arrays in individual queries for fields that do not use indexes, use \"_tiarr.\" to prefix field names.\n \n\tcoll.find({'arr.num':10},{\"_tiar.arr.num\":0}) \n\n####  new Db(path, options)\n\nThe only required parameter is the database path. It should be a valid path to an empty folder or a folder that already contains collection files.\n\nDual usage\n=========\n\nIt is possible to build applications that will transparently support both MongoDB and TingoDB. Here are some hints on how to do that:\n\n* Wrap the module `require` call into a helper module or make it part of the core object. This way you can control which engine is loaded in one place.\n* Use only native JavaScript types. BSON types can be slow in JavaScript and will need special attention when passed to or from client JavaScript.\n* Treat ObjectID just as a unique value that can be converted to and from String regardless its actual meaning.\n\nExample below (please see the three files).\n\n###### engine.js - wrapper around TingoDB and MongoDB\n\n\n```javascript\t\nvar fs = require('fs'),db,engine;\n\n// load config\nvar cfg = JSON.parse(fs.readFileSync(\"./config.json\"));\n\n// load requestd engine and define engine-agnostic getDB function\nif (cfg.app.engine==\"mongodb\") {\n\tengine = require(\"mongodb\");\n\tmodule.exports.getDB = function () {\n\t\tif (!db) db = new engine.Db(cfg.mongo.db,\n\t\t\tnew engine.Server(cfg.mongo.host, cfg.mongo.port, cfg.mongo.opts),\n\t\t\t\t{native_parser: false, safe:true});\n\t\treturn db;\n\t}\n} else {\n\tengine = require(\"tingodb\")({});\n\tmodule.exports.getDB = function () {\n\t\tif (!db) db = new engine.Db(cfg.tingo.path, {});\n\t\treturn db;\n\t}\n}\n// Depending on engine, this can be a different class\nmodule.exports.ObjectID = engine.ObjectID;\n```\n\n###### sample.js - Dummy usage example, pay attention to comments\n\n\n```javascript\t\nvar engine = require('./engine');\nvar db = engine.getDB();\n\nconsole.time(\"sample\")\ndb.open(function(err,db) {\n\tdb.collection(\"homes\", function (err, homes) {\n\t\t// it's fine to create ObjectID in advance\n\t\t// NOTE!!! we get class through engine because its type\n\t\t// can depends on database type\n\t\tvar homeId = new engine.ObjectID();\n\t\t// but with TingoDB.ObjectID righ here it will be negative\n\t\t// which means temporary. However it's unique and can be used for \n\t\t// comparisons\n\t\tconsole.log(homeId);\n\t\thomes.insert({_id:homeId, name:\"test\"}, function (err, home) {\n\t\t\tvar home = home[0];\n\t\t\t// here, homeID will change its value and will be in sync\n\t\t\t// with the database\n\t\t\tconsole.log(homeId,home);\n\t\t\tdb.collection(\"rooms\", function (err, rooms) {\n\t\t\t\tfor (var i=0; i<5; i++) {\n\t\t\t\t\t// it's ok also to not provide id, then it will be generated\n\t\t\t\t\trooms.insert({name:\"room_\"+i,_idHome:homeId}, function (err, room) {\n\t\t\t\t\t\tconsole.log(room[0]);\n\t\t\t\t\t\ti--;\n\t\t\t\t\t\tif (i==0) {\n\t\t\t\t\t\t\t// now lets assume we serving request like\n\t\t\t\t\t\t\t// /rooms?homeid=_some_string_\n\t\t\t\t\t\t\tvar query = \"/rooms?homeid=\"+homeId.toString();\n\t\t\t\t\t\t\t// dirty code to get simulated GET variable\n\t\t\t\t\t\t\tvar getId = query.match(\"homeid=(.*)\")[1];\n\t\t\t\t\t\t\tconsole.log(query, getId)\n\t\t\t\t\t\t\t// typical code to get id from external world\n\t\t\t\t\t\t\t// and use it for queries\n\t\t\t\t\t\t\trooms.find({_idHome:new engine.ObjectID(getId)})\n\t\t\t\t\t\t\t\t.count(function (err, count) {\n\t\t\t\t\t\t\t\t\tconsole.log(count);\n\t\t\t\t\t\t\t\t\tconsole.timeEnd(\"sample\");\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t})\n})\n```\n\n###### config.json - Dummy config\n\n```javascript\t\n{\n\t\"app\":{\n\t\t\"engine\":\"tingodb\"\n\t},\n\t\"mongo\":{\n\t\t\"host\":\"127.0.0.1\",\n\t\t\"port\":27017,\n\t\t\"db\":\"data\",\n\t\t\"opts\":{\n\t\t\t\"auto_reconnect\": true,\n\t\t\t\"safe\": true\n\t\t}\n\t},\n\t\"tingo\":{\n\t\t\"path\":\"./data\"\n\t}\n}\n```\n\n###### Console output running on TingoDB\n\n\t\n\t-2\n\t13 { _id: 13, name: 'test' }\n\t{ name: 'room_0', _idHome: 13, _id: 57 }\n\t{ name: 'room_1', _idHome: 13, _id: 58 }\n\t{ name: 'room_2', _idHome: 13, _id: 59 }\n\t{ name: 'room_3', _idHome: 13, _id: 60 }\n\t{ name: 'room_4', _idHome: 13, _id: 61 }\n\t/rooms?homeid=13 13\n\t5\n\tsample: 27ms\n\n###### Console output running on MongoDB\n\n\t51b43a05f092a1c544000001\n\t51b43a05f092a1c544000001 { _id: 51b43a05f092a1c544000001, name: 'test' }\n\t{ name: 'room_3',\n\t  _idHome: 51b43a05f092a1c544000001,\n\t  _id: 51b43a05f092a1c544000005 }\n\t{ name: 'room_2',\n\t  _idHome: 51b43a05f092a1c544000001,\n\t  _id: 51b43a05f092a1c544000004 }\n\t{ name: 'room_1',\n\t  _idHome: 51b43a05f092a1c544000001,\n\t  _id: 51b43a05f092a1c544000003 }\n\t{ name: 'room_0',\n\t  _idHome: 51b43a05f092a1c544000001,\n\t  _id: 51b43a05f092a1c544000002 }\n\t{ name: 'room_4',\n\t  _idHome: 51b43a05f092a1c544000001,\n\t  _id: 51b43a05f092a1c544000006 }\n\t/rooms?homeid=51b43a05f092a1c544000001 51b43a05f092a1c544000001\n\t5\n\tsample: 22ms\n\t\nCompatibility\n=========\nWe maintain full API and functionality compatibility with MongoDB **BUT** only for what we implemented support. I.e. if we support something it will work exactly the same way, but some features are not yet supported or support is limited. \n\n- Search, almost all clauses. Indexes are used to increase search speed and sorting.\n- Map reduce, almost all\n- Grouping, almost all\n- Collection, almost all methods\n- Cursor, almost all methods\n- GridFS, no support\n- Feature X, might be :)\n\n\n## MIT License\n\nCopyright (c) [PushOk Software](http://www.pushok.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/43ade4aa68ffeff6305805e22bcf676a \"githalytics.com\")](http://githalytics.com/sergeyksv/tingodb)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sergeyksv/tingodb/issues"
  },
  "_id": "tingodb@0.3.0",
  "dist": {
    "shasum": "611ba9288f6b7f4ad0b3f7467f8279b5d52c2929"
  },
  "_resolved": "git://github.com/sergeyksv/tingodb.git#3a74630c0a2b091ffbee5197bbe1f2f7ef55ed03",
  "_from": "tingodb@git://github.com/sergeyksv/tingodb.git"
}
